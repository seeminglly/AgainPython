### 모듈

함수나 변수, 클래스를 모아 놓은 파일

다른 프로그램에서 불러와 사용 가능

### 모듈 만들기

```python
# mod1.py
def add(a,b):
    return a+b
def sub(a,b):
    return a-b
```

### 모듈 불러오기

만들어놓은 mod1 모듈을 불러와보자

```python
모듈을 저장한 디렉토리로 이동한 다음 진행해야함

import mod1

print(mod1.add(3,4))
'7'
print(mod1.sub(5,2))
'3'
```

$ import 사용법

>>> import *모듈이름 (.py와 같은 확장자 제외)*

또는

```python
from 모듈이름 import 모듈함수

ex)
from mod1 import add
print(add(3,4))
'7'
근데 이렇게 하면 add 또는 sub 함수 한가지씩만 사용 가능함
둘 다 사용하고 싶다면

0. from mod1 import add,sub
1. from mod1 import *
```

### if __name __ == “__main__” 의 의미

```python
# mod1.py
def add(a,b):
    return a+b
def sub(a,b):
    return a-b

print(add(1,4))
print(sub(4,2))

출력하는 코드를 추가하고 이를 실행하면 5,2가 출력됨
그런데 명령 프롬프트창에서 import mod1 을 입력하면
단지 mod1.py의 add,sub함수만 사용하려고 했을 뿐인데
mod1.py가 실행되어 결괏값 5,2를 출력하게 됨
-> 이를 방지하기 위해 사용하는 것: if __name__ = "__main__"
```

```python
def add(a,b):
		return a+b
def sub(a,b):
		return a-b

if __name__ = "__main__":
		print(add(1,4))
		print(sub(5,2))

이렇게 해주면 명령프롬프트창에서 실행했을 때 
__name__ = "__main__"이 거짓이 되어 if문 실행X
(즉 함수만 사용 가능)
```

- 모듈은 함수뿐만 아니라 클래스나 변수 등을 포함할 수 있음
